// Piece Square Table

// stores information about how good the position of a piece is

// this will be used in the evaluation function to encourage the
// engine to develop its pieces and move them to active squares

struct PSQT : Noncopyable
{
	int midgame[16][64];
	int endgame[16][64];

	// Phase (Endgame/Midgame), Piece, Square
	int bonus[2][6][64] = 
	 { 
	  { // Midgame
	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
39, 70, 27, 52, 31, 71, 0, -29, 
-14, -9, 1, 10, 65, 85, 40, 5, 
-35, -19, -13, 10, 5, 3, -10, -24, 
-39, -34, -9, 2, 9, 3, -13, -29, 
-38, -34, -19, -15, -2, -5, 10, -20, 
-27, -21, -19, -8, -6, 33, 30, -8, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-161, -73, -57, -55, 20, -110, -14, -100, 
-81, -46, 76, 18, 13, 40, 3, -31, 
-51, 50, 10, 40, 61, 101, 70, 44, 
6, 19, 5, 55, 34, 54, 19, 29, 
2, 9, 6, 13, 22, 20, 26, 17, 
-7, -13, 0, -3, 15, 3, 22, -2, 
-3, -35, -16, 12, 8, 20, 1, 12, 
-91, 12, -24, -11, 22, -3, 12, 2, 
	   },
	   { // Bishop
-28, -16, -123, -67, -42, -61, -18, -4, 
-36, -1, -44, -48, 2, 24, -9, -77, 
-20, 16, 20, 0, 1, 18, 8, -12, 
-9, 13, -5, 26, 14, 19, 14, -8, 
7, 6, 10, 13, 27, 1, 8, 19, 
12, 22, 12, 15, 16, 33, 19, 25, 
26, 29, 21, 10, 19, 24, 52, 21, 
-17, 24, 24, 12, 22, 13, -14, 4, 
	   },
	   { // Rook
16, 20, -13, 35, 33, -39, -16, 1, 
15, 10, 49, 44, 64, 43, -12, 13, 
-4, 25, 22, 37, 7, 35, 60, 2, 
-25, -8, 15, 20, 21, 32, -3, -19, 
-46, -26, -9, -7, 3, -14, 3, -34, 
-44, -23, -11, -15, 1, -5, -10, -36, 
-42, -15, -15, -4, 8, 3, -3, -60, 
-20, -17, -8, 2, 7, -4, -25, -8, 
	   },
	   { // Queen
2, -20, -5, -18, 60, 29, 22, 40, 
-17, -47, -25, -1, -60, 5, -12, 38, 
4, -3, 21, -23, 15, 55, 21, 38, 
-21, -15, -24, -31, -6, -6, -9, -5, 
8, -27, 0, -6, 0, 0, 6, 4, 
-8, 23, 0, 10, 5, 11, 25, 16, 
-11, 12, 30, 22, 27, 31, 22, 30, 
31, 7, 17, 36, 10, 1, -3, -25, 
	   },
	   { // King
-16, 25, 34, 11, -23, -10, 5, 3, 
27, 44, 25, 53, 25, 22, -9, -33, 
23, 59, 78, 33, 37, 78, 83, -19, 
10, 16, 29, 9, -8, -12, 9, -73, 
-50, 51, -5, -75, -81, -53, -50, -99, 
5, 7, -17, -45, -50, -39, 0, -37, 
24, 29, -13, -69, -46, -17, 28, 22, 
-25, 51, 27, -64, 11, -25, 45, 22, 
	   }
	  },

	  { // Endgame
 	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
113, 102, 97, 78, 90, 79, 103, 121, 
8, 6, 12, -7, -5, -16, 3, 4, 
-5, -10, -14, -27, -22, -19, -17, -15, 
-14, -16, -22, -23, -24, -27, -27, -25, 
-23, -22, -23, -15, -16, -22, -36, -32, 
-19, -25, -9, -18, -7, -22, -35, -35, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-42, -25, 12, -11, -7, -9, -48, -85, 
-3, 9, -15, 17, 8, -9, -5, -31, 
-5, -3, 27, 22, 9, 5, -7, -26, 
-1, 18, 39, 31, 34, 22, 20, 0, 
0, 10, 30, 41, 29, 29, 18, -3, 
-6, 13, 12, 29, 23, 12, -3, -5, 
-19, 0, 9, 6, 9, -2, -5, -32, 
-3, -33, -9, 4, -11, -5, -34, -51, 
	   },
	   { // Bishop
-8, -11, 4, 1, 3, 0, -1, -18, 
4, 1, 13, -2, 2, -3, -1, 2, 
9, -3, 0, 0, -1, 2, 6, 11, 
5, 6, 11, 5, 5, 5, -3, 8, 
1, 2, 9, 14, 0, 6, -4, -3, 
-3, 0, 9, 10, 13, -3, -1, -6, 
-7, -15, -3, 3, 5, -4, -14, -21, 
-10, 0, -10, 0, -5, -4, 4, -9, 
	   },
	   { // Rook
8, 6, 17, 5, 9, 18, 15, 8, 
7, 11, 3, 5, -9, 0, 13, 5, 
7, 5, 3, 1, 2, -3, -7, -1, 
8, 2, 10, 0, 2, 0, 0, 7, 
11, 8, 8, 3, -2, -3, -6, 0, 
4, 1, -6, -3, -9, -11, -3, -8, 
0, -4, -2, -1, -13, -11, -12, 0, 
-8, 0, 1, -3, -7, -8, -3, -28, 
	   },
	   { // Queen
-28, 25, 22, 27, 10, 15, 14, 28, 
-22, 7, 25, 28, 58, 26, 36, 14, 
-18, -9, -26, 44, 30, 6, 22, 22, 
17, 15, 3, 19, 29, 24, 70, 55, 
-13, 21, -6, 8, 2, 10, 30, 32, 
-4, -49, -11, -19, -4, -6, 0, 18, 
-11, -41, -46, -30, -26, -40, -55, -32, 
-48, -37, -37, -66, -16, -31, -16, -38, 
	   },
	   { // King
-90, -44, -25, -21, -12, 13, -2, -21, 
-20, 8, 8, 11, 16, 33, 22, 6, 
-2, 11, 12, 11, 14, 41, 36, 8, 
-17, 15, 22, 28, 27, 35, 25, 6, 
-18, -11, 21, 35, 37, 30, 13, -3, 
-25, -5, 13, 26, 29, 22, 6, -7, 
-37, -15, 8, 18, 18, 9, -9, -26, 
-65, -47, -27, -7, -28, -11, -39, -63, 
	   }
	  }
	 };

	void prepare()
	{
		for (PieceType type : { PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING }) {
			for (unsigned square = 0; square < 64; square++) {
				midgame[type][square] = bonus[MIDGAME][type][square];
				endgame[type][square] = bonus[ENDGAME][type][square];
			}
		}
	}

	PSQT()
	{
		prepare();
	}
};
