// Piece Square Table

// stores information about how good the position of a piece is

// this will be used in the evaluation function to encourage the
// engine to develop its pieces and move them to active squares

struct PSQT : Noncopyable
{
	int midgame[16][64];
	int endgame[16][64];

	// Phase (Endgame/Midgame), Piece, Square
	int bonus[2][6][64] = 
	 { 
	  { // Midgame
	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
39, 70, 27, 52, 29, 67, 0, -27, 
-13, -9, 2, 10, 62, 84, 38, 3, 
-35, -19, -12, 10, 5, 2, -9, -25, 
-39, -33, -9, 3, 10, 4, -12, -30, 
-39, -35, -19, -13, 0, -2, 11, -20, 
-29, -22, -20, -6, -8, 35, 30, -9, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-155, -70, -53, -53, 19, -107, -13, -96, 
-81, -46, 76, 16, 12, 40, 2, -33, 
-52, 51, 10, 37, 56, 98, 68, 42, 
5, 19, 5, 54, 33, 52, 20, 30, 
3, 9, 5, 13, 23, 21, 25, 15, 
-7, -13, 0, -4, 17, 6, 22, -3, 
-3, -37, -17, 14, 7, 20, -1, 12, 
-90, 11, -24, -11, 22, -3, 13, 5, 
	   },
	   { // Bishop
-28, -18, -125, -66, -38, -58, -15, -10, 
-37, -1, -46, -52, 0, 22, -12, -81, 
-16, 21, 24, 0, 0, 18, 4, -13, 
-4, 17, 0, 29, 11, 14, 9, -9, 
9, 10, 10, 17, 25, 0, 5, 15, 
14, 24, 15, 15, 13, 32, 14, 20, 
27, 30, 19, 11, 22, 25, 53, 19, 
-17, 20, 22, 10, 23, 16, -14, 2, 
	   },
	   { // Rook
22, 24, -6, 41, 40, -35, -10, 10, 
19, 16, 54, 48, 68, 42, -6, 17, 
-5, 25, 21, 37, 0, 30, 56, -1, 
-24, -9, 13, 14, 14, 20, -11, -25, 
-48, -26, -11, -12, -1, -22, -3, -41, 
-42, -22, -10, -12, 4, -7, -12, -37, 
-40, -13, -13, 0, 11, 1, -5, -60, 
-18, -15, -5, 4, 9, -2, -25, -7, 
	   },
	   { // Queen
5, -20, 0, -13, 63, 32, 28, 44, 
-12, -40, -20, 0, -56, 3, -7, 42, 
7, 0, 22, -24, 11, 52, 17, 37, 
-19, -11, -22, -34, -17, -17, -20, -7, 
11, -23, -1, -12, -8, -11, -3, -4, 
-3, 28, 4, 10, 2, 5, 18, 11, 
-6, 17, 34, 24, 31, 32, 21, 27, 
35, 10, 21, 41, 14, 5, 0, -26, 
	   },
	   { // King
-15, 24, 33, 10, -24, -10, 4, 2, 
27, 41, 23, 49, 23, 19, -10, -33, 
22, 57, 74, 28, 35, 75, 78, -20, 
10, 16, 28, 6, -11, -16, 9, -73, 
-48, 49, -3, -69, -77, -49, -49, -98, 
4, 10, -11, -36, -40, -34, 1, -40, 
20, 31, -9, -60, -37, -12, 28, 18, 
-27, 50, 25, -65, 9, -25, 42, 15, 
	   }
	  },

	  { // Endgame
 	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
113, 102, 97, 79, 91, 79, 104, 121, 
9, 6, 11, -7, -4, -15, 3, 4, 
-5, -10, -15, -27, -22, -19, -17, -14, 
-14, -16, -22, -24, -24, -28, -28, -25, 
-23, -22, -23, -16, -17, -23, -37, -32, 
-19, -25, -9, -18, -6, -23, -35, -35, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-42, -26, 10, -11, -7, -10, -50, -85, 
-3, 9, -15, 16, 8, -10, -6, -32, 
-5, -3, 27, 23, 10, 6, -6, -26, 
-1, 19, 40, 32, 35, 23, 20, -1, 
0, 10, 30, 41, 29, 29, 17, -2, 
-6, 14, 13, 30, 23, 12, -2, -5, 
-20, 0, 10, 5, 10, -1, -4, -33, 
-3, -31, -9, 4, -10, -5, -35, -53, 
	   },
	   { // Bishop
-8, -10, 4, 1, 4, 0, 0, -17, 
5, 1, 13, -1, 3, -2, 0, 4, 
9, -3, -1, 0, -1, 2, 6, 11, 
4, 5, 9, 5, 5, 6, -3, 7, 
0, 1, 9, 12, 0, 6, -3, -2, 
-4, 0, 9, 10, 13, -2, 0, -5, 
-6, -15, -4, 1, 2, -5, -14, -22, 
-11, 0, -12, -1, -6, -6, 5, -9, 
	   },
	   { // Rook
7, 6, 16, 5, 8, 17, 15, 6, 
6, 10, 3, 5, -9, 1, 12, 5, 
7, 5, 3, 1, 4, -2, -6, 0, 
8, 3, 10, 0, 4, 2, 1, 8, 
11, 8, 8, 4, -2, -2, -5, 1, 
4, 1, -7, -4, -10, -11, -4, -9, 
0, -4, -3, -2, -14, -10, -11, -1, 
-8, 0, 0, -3, -7, -8, -3, -28, 
	   },
	   { // Queen
-28, 28, 21, 27, 10, 16, 13, 29, 
-23, 6, 23, 29, 58, 28, 35, 16, 
-19, -10, -27, 45, 31, 8, 24, 23, 
16, 13, 1, 21, 34, 29, 74, 52, 
-14, 18, -6, 11, 5, 13, 32, 35, 
-7, -52, -14, -18, -3, -4, 0, 20, 
-12, -43, -48, -33, -30, -42, -54, -31, 
-48, -37, -40, -71, -17, -34, -18, -39, 
	   },
	   { // King
-89, -43, -25, -21, -13, 13, -2, -22, 
-20, 8, 8, 11, 16, 33, 21, 6, 
-2, 11, 13, 11, 14, 41, 36, 8, 
-18, 15, 22, 28, 27, 35, 25, 5, 
-19, -11, 21, 34, 36, 29, 13, -3, 
-25, -5, 13, 25, 28, 21, 6, -6, 
-37, -15, 8, 17, 17, 8, -9, -25, 
-65, -46, -26, -7, -26, -11, -38, -60, 
	   }
	  }
	 };

	void prepare()
	{
		for (PieceType type : { PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING }) {
			for (unsigned square = 0; square < 64; square++) {
				midgame[type][square] = bonus[MIDGAME][type][square];
				endgame[type][square] = bonus[ENDGAME][type][square];
			}
		}
	}

	PSQT()
	{
		prepare();
	}
};
