// Piece Square Table
//
// stores information about how good the position of a piece is
//
// this will be used in the evaluation function to motivate the
// engine to develop its pieces


struct PSQT// : Noncopyable
{
	Value midgame[16][64] {};

	// Phase (Endgame/Midgame), Piece, Square
	/*int bonus[2][6][64] =
	{
	 { //Midgame
	  { // Pawn
	     0,  0,  0,  0,  0,  0,  0,  0,
	    50, 50, 50, 50, 50, 50, 50, 50,
	    10, 10, 20, 30, 30, 20, 10, 10,
	     5,  5, 10, 25, 25, 10,  5,  5,
	     0,  0,  0, 20, 20,  0,  0,  0,
	     5, -5,-10,  0,  0,-10, -5,  5,
	     5, 10, 10,-20,-20, 10, 10,  5,
	     0,  0,  0,  0,  0,  0,  0,  0
	  },
	  {
	   -50,-40,-30,-30,-30,-30,-40,-50,
	   -40,-20,  0,  0,  0,  0,-20,-40,
	   -30,  0, 10, 15, 15, 10,  0,-30,
	   -30,  5, 15, 20, 20, 15,  5,-30,
	   -30,  0, 15, 20, 20, 15,  0,-30,
	   -30,  5, 10, 15, 15, 10,  5,-30,
	   -40,-20,  0,  5,  5,  0,-20,-40,
	   -50,-40,-30,-30,-30,-30,-40,-50,
	  },
	  {
	   -20,-10,-10,-10,-10,-10,-10,-20,
	   -10,  0,  0,  0,  0,  0,  0,-10,
	   -10,  0,  5, 10, 10,  5,  0,-10,
	   -10,  5,  5, 10, 10,  5,  5,-10,
	   -10,  0, 10, 10, 10, 10,  0,-10,
	   -10, 10, 10, 10, 10, 10, 10,-10,
	   -10,  5,  0,  0,  0,  0,  5,-10,
	   -20,-10,-10,-10,-10,-10,-10,-20,
	  },
	  {
	    0,  0,  0,  0,  0,  0,  0,  0,
	    5, 10, 10, 10, 10, 10, 10,  5,
	   -5,  0,  0,  0,  0,  0,  0, -5,
	   -5,  0,  0,  0,  0,  0,  0, -5,
	   -5,  0,  0,  0,  0,  0,  0, -5,
	   -5,  0,  0,  0,  0,  0,  0, -5,
	   -5,  0,  0,  0,  0,  0,  0, -5,
	    0,  0,  0,  5,  5,  0,  0,  0
	  },
	  {
	   -20,-10,-10, -5, -5,-10,-10,-20,
	   -10,  0,  0,  0,  0,  0,  0,-10,
	   -10,  0,  5,  5,  5,  5,  0,-10,
	    -5,  0,  5,  5,  5,  5,  0, -5,
	     0,  0,  5,  5,  5,  5,  0, -5,
	   -10,  5,  5,  5,  5,  5,  0,-10,
	   -10,  0,  5,  0,  0,  0,  0,-10,
	   -20,-10,-10, -5, -5,-10,-10,-20
	  },
	  {
	   -30,-40,-40,-50,-50,-40,-40,-30,
  	   -30,-40,-40,-50,-50,-40,-40,-30,
  	   -30,-40,-40,-50,-50,-40,-40,-30,
  	   -30,-40,-40,-50,-50,-40,-40,-30,
  	   -20,-30,-30,-40,-40,-30,-30,-20,
  	   -10,-20,-20,-20,-20,-20,-20,-10,
  	    20, 20,  0,  0,  0,  0, 20, 20,
  	    20, 30, 10,  0,  0, 10, 30, 20
	  }
	 },
	 {
	  {
	  }
	 }
	};*/

	int bonus[2][6][64] = 
	 { 
	  { // Midgame
	   { // Pawn
	     0,   0,   0,   0,   0,   0,  0,   0,
     	    98, 134,  61,  95,  68, 126, 34, -11,
    	    -6,   7,  26,  31,  65,  56, 25, -20,
    	   -14,  13,   6,  21,  23,  12, 17, -23,
    	   -27,  -2,  -5,  12,  17,   6, 10, -25,
    	   -26,  -4,  -4, -10,   3,   3, 33, -12,
    	   -35,  -1, -20, -23, -15,  24, 38, -22,
    	     0,   0,   0,   0,   0,   0,  0,   0,
	   },
	   { // Knight
	   -167, -89, -34, -49,  61, -97, -15, -107,
    	    -73, -41,  72,  36,  23,  62,   7,  -17,
    	    -47,  60,  37,  65,  84, 129,  73,   44,
    	     -9,  17,  19,  53,  37,  69,  18,   22,
    	    -13,   4,  16,  13,  28,  19,  21,   -8,
    	    -23,  -9,  12,  10,  19,  17,  25,  -16,
    	    -29, -53, -12,  -3,  -1,  18, -14,  -19,
    	   -105, -21, -58, -33, -17, -28, -19,  -23,
	   },
	   { // Bishop
	   -29,   4, -82, -37, -25, -42,   7,  -8,
    	   -26,  16, -18, -13,  30,  59,  18, -47,
    	   -16,  37,  43,  40,  35,  50,  37,  -2,
    	    -4,   5,  19,  50,  37,  37,   7,  -2,
    	    -6,  13,  13,  26,  34,  12,  10,   4,
    	     0,  15,  15,  15,  14,  27,  18,  10,
    	     4,  15,  16,   0,   7,  21,  33,   1,
    	   -33,  -3, -14, -21, -13, -12, -39, -21,
	   },
	   { // Rook
	    32,  42,  32,  51, 63,  9,  31,  43,
    	    27,  32,  58,  62, 80, 67,  26,  44,
    	    -5,  19,  26,  36, 17, 45,  61,  16,
    	   -24, -11,   7,  26, 24, 35,  -8, -20,
    	   -36, -26, -12,  -1,  9, -7,   6, -23,
    	   -45, -25, -16, -17,  3,  0,  -5, -33,
    	   -44, -16, -20,  -9, -1, 11,  -6, -71,
    	   -19, -13,   1,  17, 16,  7, -37, -26,
	   },
	   { // Queen
	   -28,   0,  29,  12,  59,  44,  43,  45,
    	   -24, -39,  -5,   1, -16,  57,  28,  54,
    	   -13, -17,   7,   8,  29,  56,  47,  57,
    	   -27, -27, -16, -16,  -1,  17,  -2,   1,
    	    -9, -26,  -9, -10,  -2,  -4,   3,  -3,
    	   -14,   2, -11,  -2,  -5,   2,  14,   5,
    	   -35,  -8,  11,   2,   8,  15,  -3,   1,
    	    -1, -18,  -9,  10, -15, -25, -31, -50,
	   },
	   { // King
	   -65,  23,  16, -15, -56, -34,   2,  13,
   	    29,  -1, -20,  -7,  -8,  -4, -38, -29,
   	    -9,  24,   2, -16, -20,   6,  22, -22,
   	   -17, -20, -12, -27, -30, -25, -14, -36,
   	   -49,  -1, -27, -39, -46, -44, -33, -51,
   	   -14, -14, -22, -46, -44, -30, -15, -27,
   	     1,   7,  -8, -64, -43, -16,   9,   8,
   	   -15,  36,  12, -54,   8, -28,  24,  14,
	   }
	  },

	  { // Endgame
 	   { // Pawn
	   }
	  }
	 };

	void prepare()
	{
		for (Piece pc : { W_PAWN, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING }) {
			Value mg_value = piece_value(pc, MIDGAME);
			//Value eg_value = piece_value(pc, ENDGAME);
	
			for (unsigned square = 0; square < 64; square++) {
				midgame[pc][square] = Value(mg_value + bonus[MIDGAME][type_of(pc)][square]);
				midgame[pc + 8][mirrored(square)] = Value(-midgame[pc][square]);

				//endgame[pc][square] = Value(eg_value + bonus[ENDGAME][type_of(pc)][square]);
				//endgame[pc + 8][mirrored(square)] = Value(-endgame[pc][square]);
			}
		}
	}

	PSQT()
	{
		prepare();
	}
};
