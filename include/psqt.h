// Piece Square Table

// stores information about how good the position of a piece is

// this will be used in the evaluation function to encourage the
// engine to develop its pieces and move them to active squares

struct PSQT : Noncopyable
{
	int midgame[16][64];
	int endgame[16][64];

	// Phase (Endgame/Midgame), Piece, Square
	int bonus[2][6][64] = 
	 { 
	  { // Midgame
	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
39, 71, 27, 52, 31, 69, 0, -28, 
-14, -9, 2, 9, 61, 83, 39, 3, 
-35, -19, -12, 10, 5, 2, -9, -25, 
-39, -33, -9, 3, 10, 4, -12, -30, 
-39, -35, -19, -13, 0, -2, 11, -19, 
-29, -22, -20, -6, -8, 35, 30, -9, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-156, -68, -51, -53, 19, -107, -13, -97, 
-81, -46, 76, 16, 12, 39, 3, -34, 
-52, 50, 10, 38, 58, 98, 67, 39, 
5, 19, 6, 54, 32, 52, 20, 30, 
2, 9, 5, 13, 23, 21, 25, 15, 
-8, -13, 0, -3, 18, 6, 23, -3, 
-3, -36, -17, 13, 7, 20, 0, 11, 
-89, 11, -25, -11, 22, -3, 12, 5, 
	   },
	   { // Bishop
-27, -18, -119, -64, -38, -56, -15, -8, 
-37, 0, -45, -49, 0, 20, -13, -83, 
-16, 20, 24, 0, 0, 16, 3, -13, 
-4, 17, 0, 28, 11, 14, 9, -10, 
10, 11, 11, 16, 25, 0, 4, 15, 
14, 24, 14, 15, 14, 32, 14, 20, 
27, 30, 20, 11, 22, 25, 53, 18, 
-17, 21, 23, 11, 23, 16, -12, 3, 
	   },
	   { // Rook
21, 25, -7, 40, 38, -33, -10, 10, 
19, 15, 53, 48, 67, 43, -7, 17, 
-4, 24, 20, 36, 0, 29, 55, -1, 
-25, -10, 13, 14, 12, 22, -12, -24, 
-47, -27, -11, -12, -2, -22, -3, -40, 
-41, -22, -9, -13, 4, -7, -12, -36, 
-39, -13, -13, -1, 11, 1, -4, -60, 
-17, -15, -5, 4, 9, -2, -25, -7, 
	   },
	   { // Queen
5, -16, 0, -11, 62, 31, 28, 43, 
-12, -40, -21, 0, -54, 6, -8, 40, 
6, 0, 22, -23, 12, 50, 17, 36, 
-19, -12, -22, -35, -16, -16, -19, -7, 
11, -24, -1, -12, -9, -11, -3, -4, 
-4, 27, 3, 9, 1, 5, 18, 11, 
-7, 16, 33, 23, 30, 31, 20, 26, 
34, 9, 20, 40, 13, 4, -1, -26, 
	   },
	   { // King
-15, 21, 30, 10, -21, -9, 4, 2, 
24, 39, 22, 47, 22, 19, -9, -30, 
21, 53, 69, 28, 32, 71, 74, -17, 
8, 15, 28, 8, -8, -12, 9, -70, 
-46, 51, -1, -68, -74, -47, -47, -98, 
3, 9, -11, -35, -40, -33, 1, -39, 
22, 32, -8, -59, -37, -12, 29, 18, 
-28, 50, 26, -64, 9, -24, 43, 15, 
	   }
	  },

	  { // Endgame
 	   { // Pawn
0, 0, 0, 0, 0, 0, 0, 0, 
113, 102, 97, 78, 90, 79, 103, 120, 
9, 6, 11, -6, -3, -15, 3, 4, 
-5, -10, -15, -27, -22, -19, -17, -15, 
-14, -16, -22, -24, -24, -28, -28, -25, 
-23, -22, -23, -16, -17, -23, -36, -32, 
-19, -25, -9, -19, -6, -23, -35, -35, 
0, 0, 0, 0, 0, 0, 0, 0, 
	   },
	   { // Knight
-44, -26, 11, -12, -7, -10, -48, -86, 
-3, 9, -15, 17, 8, -9, -5, -31, 
-5, -3, 27, 23, 10, 6, -6, -25, 
-1, 18, 39, 31, 34, 22, 20, 0, 
0, 10, 30, 40, 29, 29, 18, -2, 
-5, 13, 12, 29, 22, 11, -3, -4, 
-19, 0, 9, 5, 9, -2, -4, -32, 
-4, -31, -9, 4, -10, -5, -35, -51, 
	   },
	   { // Bishop
-8, -11, 4, 0, 3, -1, -1, -17, 
4, 0, 14, -2, 2, -3, 0, 3, 
9, -4, -1, 0, 0, 2, 7, 11, 
4, 5, 9, 4, 6, 6, -2, 8, 
1, 1, 10, 13, 0, 6, -3, -2, 
-3, 0, 9, 9, 13, -3, 0, -4, 
-7, -15, -3, 1, 3, -4, -14, -21, 
-10, 0, -10, 0, -5, -6, 3, -9, 
	   },
	   { // Rook
8, 6, 16, 5, 8, 17, 14, 6, 
6, 11, 3, 5, -9, 1, 12, 5, 
7, 5, 3, 2, 4, -2, -5, 0, 
8, 3, 10, 0, 4, 2, 2, 8, 
11, 8, 8, 4, -2, -2, -5, 1, 
4, 1, -7, -3, -10, -11, -4, -8, 
0, -4, -3, -2, -14, -10, -12, -1, 
-8, 0, 0, -4, -7, -9, -3, -28, 
	   },
	   { // Queen
-28, 25, 21, 25, 11, 17, 14, 29, 
-23, 5, 24, 28, 55, 27, 35, 16, 
-19, -10, -27, 44, 31, 9, 24, 24, 
16, 13, 1, 21, 34, 28, 74, 54, 
-15, 18, -5, 12, 6, 13, 32, 36, 
-6, -53, -14, -18, -2, -4, 1, 19, 
-12, -43, -48, -32, -29, -42, -54, -29, 
-49, -38, -40, -71, -18, -33, -18, -39, 
	   },
	   { // King
-88, -43, -25, -21, -13, 13, -2, -21, 
-20, 8, 8, 12, 16, 33, 21, 5, 
-2, 11, 13, 11, 14, 42, 37, 7, 
-17, 15, 22, 28, 27, 35, 25, 5, 
-19, -11, 21, 34, 36, 29, 13, -3, 
-25, -5, 13, 25, 28, 21, 6, -6, 
-37, -15, 7, 16, 17, 8, -9, -25, 
-64, -46, -26, -7, -26, -11, -39, -60, 
	   }
	  }
	 };

	void prepare()
	{
		for (PieceType type : { PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING }) {
			for (unsigned square = 0; square < 64; square++) {
				midgame[type][square] = bonus[MIDGAME][type][square];
				endgame[type][square] = bonus[ENDGAME][type][square];
			}
		}
	}

	PSQT()
	{
		prepare();
	}
};
