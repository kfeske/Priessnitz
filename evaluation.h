#pragma once

#include "utility.h"
#include "board.h"

struct Evaluation : Noncopyable
{
	int mg_bonus[2];
	int eg_bonus[2];
	uint64_t ring[2];
	uint64_t zone[2];
	int ring_pressure[2];
	int zone_pressure[2];
	int ring_attackers[2];
	int zone_attackers[2];

	int mg_piece_value[6] = { 91, 415, 440, 591, 1214, 0, };
	int eg_piece_value[6] = { 113, 289, 317, 566, 1078, 0, };
	
	int mg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0, 
		29, 71, 14, 41, 23, 52, -16, -38, 
		-13, -3, -22, -17, 22, 51, 4, -19, 
		-28, -16, -7, 18, 12, 5, -9, -18, 
		-30, -28, -1, 11, 19, 13, -8, -22, 
		-31, -28, -10, -6, 7, 5, 19, -11, 
		-21, -10, -12, 7, 8, 43, 43, -1, 
		0, 0, 0, 0, 0, 0, 0, 0, 
	};
	int mg_knight_psqt[64] = {
		-104, -43, -34, -31, 17, -75, -10, -55, 
		-64, -51, 77, 19, 14, 32, -6, -30, 
		-62, 44, 9, 36, 53, 85, 62, 45, 
		4, 17, -1, 53, 32, 51, 13, 29, 
		0, 8, 4, 6, 22, 17, 19, 17, 
		-10, -16, -2, -10, 11, 0, 20, -8, 
		4, -31, -21, 16, 9, 22, -12, 9, 
		-52, 13, -29, -27, 12, -15, 13, 2, 
	};
	int mg_bishop_psqt[64] = {
		-37, -20, -84, -55, -14, -27, -16, -9, 
		-45, -2, -47, -47, 1, 31, -15, -81, 
		-29, 25, 21, -1, 0, 30, 7, -17, 
		-11, 13, 2, 27, 17, 14, 16, -19, 
		7, 8, 8, 16, 26, 7, 8, 29, 
		12, 18, 13, 15, 16, 33, 13, 23, 
		26, 28, 20, 9, 16, 20, 50, 26, 
		-13, 20, 22, 7, 12, 11, -16, 10, 
	};
	int mg_rook_psqt[64] = {
		7, 24, -26, 33, 21, -34, -2, 4, 
		19, 14, 57, 40, 60, 42, -5, 13, 
		-2, 35, 24, 49, -6, 33, 55, 9, 
		-24, -3, 17, 19, 32, 27, -7, -18, 
		-51, -16, -12, -10, 11, -19, 6, -33, 
		-45, -23, -11, -14, 6, -4, -11, -37, 
		-44, -9, -14, 1, 15, 4, 6, -61, 
		-22, -16, -6, 6, 14, 1, -28, -5, 
	};
	int mg_queen_psqt[64] = {
		9, -11, 4, -10, 43, 23, 24, 37, 
		-13, -56, -14, 10, -33, 9, -5, 38, 
		2, -3, 13, -31, 9, 35, 16, 41, 
		-25, -16, -25, -39, -14, -13, -5, -10, 
		12, -34, 2, -6, -2, -2, 6, 5, 
		-7, 28, 1, 12, 2, 11, 28, 10, 
		-4, 17, 36, 26, 31, 36, 20, 22, 
		27, 8, 21, 40, 11, 3, -4, -30, 
	};
	int mg_king_psqt[64] = {
		-14, 4, 15, 2, -15, 1, 3, -5, 
		15, 18, 13, 28, 16, 13, -6, -16, 
		9, 28, 35, 16, 16, 51, 52, -7, 
		-7, 3, 20, 7, -8, -10, 12, -40, 
		-18, 32, -4, -61, -68, -41, -34, -54, 
		10, 11, -12, -38, -46, -35, -6, -12, 
		37, 14, -30, -86, -59, -35, 12, 42, 
		30, 65, 35, -63, 21, -16, 60, 97, 
	};
	int eg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0, 
		115, 102, 100, 82, 97, 86, 108, 120, 
		7, 8, 21, 6, 24, 7, 20, 12, 
		-11, -15, -17, -30, -22, -17, -15, -16, 
		-19, -19, -27, -28, -27, -29, -29, -29, 
		-30, -27, -29, -23, -21, -26, -40, -36, 
		-24, -32, -16, -25, -14, -28, -40, -40, 
		0, 0, 0, 0, 0, 0, 0, 0, 
	};
	int eg_knight_psqt[64] = {
		-38, -31, 3, -16, -10, -17, -46, -61, 
		-7, 8, -21, 10, -1, -15, -3, -29, 
		-5, -9, 23, 22, 9, 9, -9, -23, 
		-3, 12, 39, 29, 30, 22, 18, 1, 
		-1, 3, 27, 39, 26, 26, 16, 2, 
		-5, 10, 10, 28, 23, 9, -8, -3, 
		-16, 0, 4, -1, 2, -9, -2, -22, 
		8, -17, -10, 7, -8, -5, -22, -12, 
	};
	int eg_bishop_psqt[64] = {
		-5, -13, -7, -5, -7, -11, 6, -18, 
		6, -1, 9, -9, 0, -5, -1, 6, 
		8, -6, 2, 2, -2, 2, 2, 9, 
		2, 6, 9, 10, 11, 7, -6, 11, 
		-2, 1, 12, 16, 4, 6, -8, -8, 
		-4, 2, 10, 10, 14, -1, 1, -2, 
		-4, -15, -5, 0, 4, -6, -12, -12, 
		-2, 5, -7, -1, -4, -3, 5, -1, 
	};
	int eg_rook_psqt[64] = {
		13, 9, 23, 10, 14, 15, 13, 10, 
		6, 10, 5, 9, -6, 2, 11, 7, 
		7, 4, 4, 0, 6, -5, -7, -2, 
		9, 1, 9, -1, -1, 4, 0, 5, 
		12, 6, 11, 4, -5, -5, -8, -1, 
		4, 2, -5, -3, -10, -13, -2, -7, 
		2, -3, -2, -3, -15, -10, -16, 1, 
		-5, 2, 2, -3, -9, -10, -1, -27, 
	};
	int eg_queen_psqt[64] = {
		-27, 18, 21, 17, 23, 18, 15, 31, 
		-22, 9, 14, 25, 39, 23, 24, 24, 
		-15, -11, -17, 49, 42, 28, 27, 25, 
		17, 15, 9, 29, 39, 26, 62, 56, 
		-16, 22, -4, 12, 8, 14, 29, 26, 
		0, -48, -6, -17, 1, -3, 3, 24, 
		-20, -39, -47, -26, -24, -38, -45, -26, 
		-30, -25, -33, -56, -7, -23, -22, -36, 
	};
	int eg_king_psqt[64] = {
		-109, -54, -23, -26, -25, -6, -16, -68, 
		-21, 34, 25, 32, 32, 49, 33, -7, 
		-4, 33, 33, 24, 29, 57, 51, -8, 
		-25, 32, 32, 35, 32, 39, 30, -21, 
		-38, 3, 30, 38, 40, 30, 15, -33, 
		-39, 7, 24, 34, 37, 29, 17, -28, 
		-48, 4, 27, 36, 36, 28, 12, -36, 
		-121, -52, -32, -13, -34, -19, -45, -126, 
	};
	
	int ring_attack_potency[6] = { 0, 4, 35, 38, 132, 0, };
	int zone_attack_potency[6] = { 0, -23, 24, 42, 24, 0, };
	
	int ring_pressure_weight[8] = { 0, 9, 39, 68, 95, 44, 0, 0, };
	int zone_pressure_weight[8] = { 0, -3, 3, 4, 14, 29, 7, 3, };
	
	int mg_knight_mobility[9] = { -15, -24, -15, -3, 17, 22, 32, 43, 59, };
	int eg_knight_mobility[9] = { -14, -64, -16, 9, 10, 16, 18, 18, 12, };
	
	int mg_bishop_mobility[14] = { 13, -51, -42, -21, -9, 1, 9, 15, 17, 24, 29, 68, 23, 52, };
	int eg_bishop_mobility[14] = { -3, -76, -29, -11, -3, 5, 10, 14, 17, 19, 16, 9, 24, 15, };
	
	int mg_rook_mobility[15] = { 4, -24, -41, -34, -29, -22, -14, -15, -7, 4, 19, 37, 57, 66, 89, };
	int eg_rook_mobility[15] = { 2, -15, -64, -33, -10, 4, 18, 19, 19, 20, 21, 21, 23, 24, 17, };
	
	int mg_queen_mobility[28] = { 0, 0, 0, -15, -56, -1, 0, 6, 3, 9, 11, 11, 12, 15, 17, 16, 19, 11, 18, 21, 23, 38, 17, 31, 35, 31, 20, 21, };
	int eg_queen_mobility[28] = { 0, 0, 0, -9, -28, -61, -53, -64, -62, -52, -37, -24, -9, -2, 4, 17, 17, 37, 27, 40, 46, 46, 62, 64, 62, 57, 53, 48, };
	
	int mg_king_mobility[9] = { 0, 12, -93, -33, -20, 33, -1, 37, 66, };
	int eg_king_mobility[9] = { 0, 39, 78, 28, 6, -33, -24, -33, -62, };
	
	int mg_isolated_penalty = -21;
	int eg_isolated_penalty = -12;
	
	int mg_doubled_penalty = -3;
	int eg_doubled_penalty = -6;
	
	int mg_backward_penalty = -13;
	int eg_backward_penalty = -14;
	
	int mg_chained_bonus = 11;
	int eg_chained_bonus = 8;
	
	int mg_passed_bonus[64] = { 
		0, 0, 0, 0, 0, 0, 0, 0, 
		29, 71, 14, 41, 23, 52, -16, -38, 
		50, 10, 33, 14, 3, 1, -33, -24, 
		26, 12, 5, -9, 4, 30, -10, -11, 
		20, -22, -28, -25, -35, -16, -14, 14, 
		9, -1, -22, -36, -1, 28, 15, 35, 
		7, 4, 4, -19, -23, 23, 15, 3, 
		0, 0, 0, 0, 0, 0, 0, 0, 
	};
	int eg_passed_bonus[64] = { 
		0, 0, 0, 0, 0, 0, 0, 0, 
		115, 102, 100, 82, 97, 86, 108, 120, 
		151, 147, 110, 96, 69, 101, 118, 137, 
		88, 76, 65, 59, 44, 52, 82, 79, 
		49, 46, 40, 31, 33, 36, 51, 45, 
		18, 19, 20, 19, 11, 8, 25, 17, 
		15, 20, 5, 22, 19, 7, 18, 21, 
		0, 0, 0, 0, 0, 0, 0, 0, 
	};
	
	int mg_double_bishop = 29;
	int eg_double_bishop = 54;	

	int tempo_bonus = 0;

	int taper_start = 6377;
	int taper_end = 321;

	void evaluate_pawn(Board &board, unsigned square, Color friendly);

	void evaluate_kings();

	void note_king_attacks(Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_mobility(Board &board, Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_piece(Board &board, Piece p, unsigned square);

	int evaluate(Board &board);
};
