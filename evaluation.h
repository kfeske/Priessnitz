#pragma once

#include "utility.h"
#include "board.h"

struct Evaluation : Noncopyable
{
	int mg_bonus[2];
	int eg_bonus[2];
	uint64_t ring[2];
	uint64_t zone[2];
	int ring_pressure[2];
	int zone_pressure[2];
	int ring_attackers[2];
	int zone_attackers[2];

	int mg_piece_value[6] = { 70, 384, 387, 519, 1078, 0, };
	int eg_piece_value[6] = { 71, 297, 317, 561, 1061, 0, };
	
	int mg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		48, 75, 34, 55, 45, 62, 10, -4,
		1, 1, 3, 6, 43, 57, 17, -8,
		-8, 0, 8, 30, 25, 21, 2, -5,
		-11, -12, 12, 24, 31, 22, 2, -9,
		-11, -13, 3, 7, 18, 14, 28, 1,
		-4, 5, 2, 19, 20, 52, 49, 10,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int mg_knight_psqt[64] = {
		-78, -46, -28, -26, 16, -56, -14, -48,
		-53, -40, 62, 15, 11, 26, 0, -26,
		-49, 34, 12, 32, 43, 65, 49, 28,
		-1, 16, 1, 51, 29, 46, 11, 21,
		-5, 6, 3, 6, 22, 16, 16, 12,
		-13, -16, -2, -9, 12, -1, 18, -12,
		-2, -28, -20, 13, 7, 20, -13, 4,
		-42, 5, -29, -27, 6, -16, 6, -2,
	};
	int mg_bishop_psqt[64] = {
		-26, -18, -69, -49, -15, -23, -16, -7,
		-40, -4, -39, -36, 2, 22, -9, -69,
		-33, 16, 18, -1, 1, 23, 4, -20,
		-15, 4, 0, 24, 14, 11, 7, -22,
		-2, 1, 0, 11, 19, 0, 3, 19,
		3, 9, 6, 6, 8, 25, 6, 12,
		15, 18, 12, 1, 8, 12, 39, 15,
		-18, 9, 12, -2, 3, 2, -18, 0,
	};
	int mg_rook_psqt[64] = {
		10, 19, -12, 28, 20, -20, 4, 7,
		17, 17, 45, 33, 43, 31, 4, 13,
		2, 30, 22, 39, 1, 24, 39, 8,
		-15, 1, 19, 22, 32, 23, -4, -10,
		-39, -10, -5, -3, 13, -13, 6, -24,
		-36, -16, -5, -8, 11, -1, -6, -30,
		-37, -3, -8, 6, 17, 8, 4, -56,
		-14, -10, 1, 13, 19, 8, -24, -3,
	};
	int mg_queen_psqt[64] = {
		-3, -4, 8, -4, 35, 22, 23, 33,
		-17, -53, -8, 12, -16, 13, 3, 32,
		-6, -7, 6, -18, 13, 31, 13, 34,
		-23, -21, -24, -40, -12, -10, 0, -14,
		2, -33, -8, -15, -10, -8, 2, 0,
		-14, 17, -7, 1, -6, 1, 18, 6,
		-12, 3, 25, 15, 20, 20, 3, 9,
		10, -3, 10, 30, 1, -8, -11, -33,
	};
	int mg_king_psqt[64] = {
		-19, 6, 20, 2, -21, 1, 3, -5,
		17, 22, 17, 35, 21, 20, -4, -21,
		7, 34, 42, 22, 23, 56, 61, -13,
		-14, 9, 23, 14, 3, 1, 16, -40,
		-29, 29, 5, -36, -37, -21, -18, -58,
		-6, 15, 2, -14, -22, -15, 9, -34,
		7, 25, -8, -61, -36, -12, 32, 16,
		-29, 36, 10, -81, -3, -39, 33, 23,
	};
	int eg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		128, 118, 111, 96, 108, 100, 118, 131,
		57, 66, 69, 60, 61, 53, 68, 64,
		32, 29, 25, 14, 21, 23, 28, 28,
		24, 25, 16, 14, 16, 13, 15, 15,
		13, 17, 15, 21, 22, 18, 5, 8,
		20, 14, 28, 20, 29, 17, 6, 4,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int eg_knight_psqt[64] = {
		-36, -24, 0, -15, -10, -20, -37, -50,
		-9, 4, -21, 5, -6, -18, -4, -26,
		-9, -11, 13, 14, 3, 6, -11, -18,
		-1, 6, 29, 21, 21, 14, 11, 3,
		0, -2, 18, 31, 17, 17, 11, 4,
		-4, 4, 1, 20, 14, 1, -13, -1,
		-11, -2, -3, -6, -3, -15, -2, -16,
		4, -13, -11, 5, -6, -6, -15, -11,
	};
	int eg_bishop_psqt[64] = {
		-10, -14, -11, -6, -7, -12, 3, -17,
		1, -2, 6, -13, -1, -3, -3, -2,
		8, -4, 2, 2, -2, 3, 1, 8,
		2, 8, 9, 11, 12, 8, -4, 10,
		-1, 2, 14, 17, 5, 8, -7, -5,
		-2, 3, 11, 12, 16, 1, 2, 0,
		-3, -12, -3, 2, 6, -4, -9, -10,
		-4, 6, -4, 0, -3, 0, 2, 0,
	};
	int eg_rook_psqt[64] = {
		15, 13, 21, 14, 17, 14, 15, 11,
		10, 13, 11, 15, 2, 7, 11, 10,
		9, 9, 8, 6, 8, 0, 0, 1,
		10, 4, 12, 2, 3, 8, 2, 6,
		12, 8, 12, 5, -2, -3, -5, 0,
		4, 3, -4, -2, -8, -10, 0, -5,
		3, -2, 0, -1, -12, -7, -10, 2,
		-3, 3, 2, -2, -8, -9, 2, -24,
	};
	int eg_queen_psqt[64] = {
		-19, 14, 19, 14, 26, 17, 14, 31,
		-20, 6, 10, 24, 28, 21, 18, 23,
		-12, -7, -8, 38, 40, 30, 26, 26,
		12, 18, 9, 31, 38, 24, 52, 49,
		-7, 20, 7, 22, 17, 20, 29, 24,
		2, -34, 3, -3, 9, 6, 11, 21,
		-13, -23, -33, -14, -12, -19, -27, -19,
		-15, -14, -20, -45, 2, -15, -18, -34,
	};
	int eg_king_psqt[64] = {
		-62, -36, -11, -13, -12, 5, -1, -27,
		-10, 19, 11, 18, 18, 35, 19, 4,
		6, 18, 20, 10, 14, 43, 37, 2,
		-15, 18, 19, 21, 19, 28, 20, -9,
		-27, -8, 16, 23, 25, 18, 3, -23,
		-28, -6, 10, 18, 21, 14, 3, -18,
		-35, -10, 10, 18, 19, 11, -4, -25,
		-77, -40, -22, -5, -24, -10, -33, -82,
	};
	
	int ring_attack_potency[6] = { 0, 12, 39, 43, 140, 0, };
	int zone_attack_potency[6] = { 0, -30, 33, 78, 51, 0, };
	
	int ring_pressure_weight[8] = { 0, 8, 35, 59, 66, 29, 0, 0, };
	int zone_pressure_weight[8] = { 0, -2, 1, 2, 7, 15, 7, 7, };
	
	int mg_knight_mobility[9] = { -24, -30, -21, -9, 8, 11, 20, 31, 45, };
	int eg_knight_mobility[9] = { -22, -76, -32, -6, -1, 10, 13, 14, 8, };
	
	int mg_bishop_mobility[14] = { 17, -43, -29, -10, 2, 10, 17, 24, 26, 32, 37, 67, 27, 46, };
	int eg_bishop_mobility[14] = { -3, -65, -32, -15, -8, 1, 6, 9, 12, 14, 11, 5, 19, 11, };
	
	int mg_rook_mobility[15] = { 6, -16, -32, -25, -20, -14, -7, -8, -1, 9, 23, 40, 58, 64, 75, };
	int eg_rook_mobility[15] = { 3, -20, -70, -40, -17, -3, 11, 13, 12, 14, 15, 16, 18, 19, 15, };
	
	int mg_queen_mobility[28] = { 0, 0, 0, -19, -48, -10, -10, -4, -7, 0, 1, 1, 2, 6, 7, 7, 10, 3, 10, 14, 20, 31, 24, 34, 38, 35, 24, 26, };
	int eg_queen_mobility[28] = { 0, 0, 0, -13, -36, -52, -39, -47, -48, -42, -29, -17, -5, 1, 6, 19, 17, 35, 26, 36, 40, 41, 50, 52, 49, 44, 44, 40, };
	
	int mg_king_mobility[9] = { 0, 18, -29, 2, -21, 24, -44, -10, 14, };
	int eg_king_mobility[9] = { 0, 30, 50, 15, 18, -15, 13, 6, -21, };
	
	int mg_isolated_penalty = -20;
	int eg_isolated_penalty = -9;
	
	int mg_doubled_penalty = 2;
	int eg_doubled_penalty = -9;
	
	int mg_backward_penalty = -13;
	int eg_backward_penalty = -13;
	
	int mg_chained_bonus = 11;
	int eg_chained_bonus = 8;
	
	int mg_passed_bonus[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		48, 75, 34, 55, 45, 62, 10, -4,
		61, 31, 29, 17, 16, 29, -2, 7,
		24, 17, 11, -1, 12, 34, 10, 1,
		16, -13, -18, -18, -17, 2, 5, 21,
		6, 2, -13, -22, 7, 30, 23, 38,
		5, 8, 8, -8, -10, 26, 22, 12,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int eg_passed_bonus[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		128, 118, 111, 96, 108, 100, 118, 131,
		131, 119, 93, 74, 62, 84, 97, 112,
		82, 69, 58, 50, 38, 47, 71, 70,
		44, 39, 33, 26, 25, 29, 43, 39,
		15, 14, 15, 11, 6, 4, 19, 12,
		10, 14, 0, 13, 11, 3, 12, 13,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	
	int mg_double_bishop = 37;
	int eg_double_bishop = 50;

	int tempo_bonus = 0;

	int taper_start = 6377;
	int taper_end = 321;

	void evaluate_pawn(Board &board, unsigned square, Color friendly);

	void evaluate_kings();

	void note_king_attacks(Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_mobility(Board &board, Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_piece(Board &board, Piece p, unsigned square);

	int evaluate(Board &board);
};
