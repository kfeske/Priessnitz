#pragma once

#include "utility.h"
#include "board.h"

struct Evaluation : Noncopyable
{
	int mg_bonus[2];
	int eg_bonus[2];
	uint64_t ring[2];
	uint64_t zone[2];
	int ring_pressure[2];
	int zone_pressure[2];
	int ring_attackers[2];
	int zone_attackers[2];

	int mg_piece_value[6] = { 47, 295, 307, 396, 896, 0, };
	int eg_piece_value[6] = { 70, 302, 310, 552, 1005, 0, };
	
	int mg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		47, 49, 35, 50, 28, 30, -23, -12,
		4, 8, 19, 23, 23, 57, 60, 27,
		-8, -6, 5, 7, 21, 25, 11, 14,
		-12, -12, 5, 15, 14, 17, 4, 3,
		-14, -11, -2, 4, 16, 8, 19, 5,
		-5, -4, 7, 6, 15, 39, 39, 10,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int mg_knight_psqt[64] = {
		-80, -41, -22, -4, -13, -29, -34, -43,
		-15, 3, 24, 28, 28, 38, 12, 20,
		-17, 23, 35, 41, 47, 47, 27, -1,
		0, 1, 13, 43, 16, 36, 2, 26,
		-9, -4, 2, 13, 13, 12, 19, 7,
		-17, -17, -13, -9, 6, -12, 2, -13,
		-30, -18, -15, -3, -8, 2, -2, -10,
		-43, -12, -25, -11, -5, -8, -12, -27,
	};
	int mg_bishop_psqt[64] = {
		7, -41, -4, -54, -36, -55, -28, -21,
		-8, -1, -19, -18, -3, -12, -6, -22,
		-16, 4, 6, 6, 5, 22, 16, -1,
		-23, -5, -9, 19, 3, 7, -2, -22,
		-16, -25, -14, 11, 2, -10, -16, 9,
		-6, -2, -2, -1, 3, -1, -1, 11,
		11, 0, 11, -8, -2, 11, 18, 8,
		-3, 11, 6, -3, 0, -4, 14, 12,
	};
	int mg_rook_psqt[64] = {
		5, 13, 7, -2, 14, 1, 24, 35,
		0, 1, 14, 33, 3, 19, 16, 32,
		4, 26, 28, 28, 38, 38, 64, 37,
		-13, 17, 10, 14, 17, 12, 13, 14,
		-24, -17, -7, -6, 0, -25, -2, -15,
		-25, -19, -14, -15, -9, -9, 15, -9,
		-36, -17, -7, -6, -2, -4, 11, -28,
		-21, -20, -14, -7, -2, -11, -5, -20,
	};
	int mg_queen_psqt[64] = {
		-16, -17, -8, 9, -2, 12, 34, 7,
		-6, -25, -10, -29, -20, -1, 4, 43,
		2, -4, 0, -18, 2, 23, 30, 16,
		-9, -4, -19, -21, -5, -5, 12, 8,
		-1, -12, -17, -18, -13, -12, 6, 5,
		-8, -4, -10, -10, -6, 2, 9, 9,
		-4, -5, 7, 12, 8, 11, 11, 16,
		1, -9, -5, 7, -1, -10, -2, -6,
	};
	int mg_king_psqt[64] = {
		-21, 3, -4, -13, -5, -2, 6, -6,
		-25, -3, -14, 16, 24, 20, 31, 16,
		-39, 10, -4, 3, 12, 41, 42, 9,
		-11, 11, -22, -37, -26, -25, -13, -47,
		-47, -15, -34, -41, -52, -17, -42, -80,
		-24, 6, -16, -35, -24, -29, 2, -60,
		25, 21, 11, -20, -24, -12, 30, 13,
		23, 46, 21, -63, -11, -41, 22, 23,
	};
	int eg_pawn_psqt[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		103, 96, 98, 80, 82, 81, 104, 111,
		58, 65, 58, 58, 46, 51, 70, 63,
		33, 26, 21, 12, 14, 16, 23, 20,
		22, 20, 14, 11, 13, 13, 11, 9,
		15, 12, 14, 21, 20, 18, 7, 5,
		19, 19, 20, 31, 29, 20, 9, 6,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int eg_knight_psqt[64] = {
		-41, -36, -15, -8, 6, -23, -11, -57,
		-2, 0, -8, -2, -5, -4, -9, -7,
		7, -6, 4, 3, 1, -2, -12, -6,
		7, 8, 21, 20, 19, 17, 11, 7,
		13, 5, 20, 17, 25, 15, 6, 9,
		-10, -3, 2, 10, 15, -3, -6, -3,
		-4, 0, -7, -5, -3, -9, -11, 6,
		-17, -15, -10, -7, -8, -8, -1, -8,
	};
	int eg_bishop_psqt[64] = {
		3, 2, -4, -8, -12, -9, 1, -19,
		-8, -7, -7, 0, -14, -6, -5, -10,
		6, -1, 0, -5, -4, 0, -5, 4,
		-3, 0, 11, 16, 8, 8, 4, 1,
		-4, 6, 11, 4, 14, 5, 8, -21,
		6, 5, 5, 6, 11, 8, 2, -1,
		0, -8, -8, 3, 2, -2, -2, -1,
		-10, 5, -1, -4, -4, 6, -7, -11,
	};
	int eg_rook_psqt[64] = {
		15, 9, 23, 17, 15, 19, 13, 12,
		10, 16, 17, 9, 12, 11, 2, 6,
		11, 11, 7, 12, 2, -2, 2, 3,
		14, 7, 14, 9, -1, -2, 5, -4,
		4, 7, 10, 10, 4, 5, 4, 4,
		3, 6, -1, 0, -1, -12, -17, -15,
		-2, -6, -4, -6, -12, -15, -14, -10,
		-2, -2, 1, 0, -8, -5, -10, -12,
	};
	int eg_queen_psqt[64] = {
		2, -5, 15, 23, 18, 15, 7, 12,
		0, 1, 18, 30, 44, 10, 5, 21,
		0, 2, 21, 33, 29, 28, 6, 30,
		6, 2, 12, 28, 27, 35, 28, 16,
		-10, 4, 13, 32, 28, 25, 7, 20,
		-7, -6, 1, 9, 18, 0, -5, 2,
		-11, -23, -27, -19, -9, -27, -29, -37,
		-18, -19, -25, -24, -21, -22, -33, -10,
	};
	int eg_king_psqt[64] = {
		-56, -25, -15, -3, -5, -1, 19, -60,
		-11, 6, 10, 14, 20, 33, 29, 7,
		-3, 12, 25, 34, 45, 45, 42, 7,
		-11, 14, 24, 31, 34, 34, 27, -3,
		-19, 3, 20, 30, 33, 20, 11, -8,
		-24, -5, 7, 17, 18, 13, -4, -10,
		-20, -9, -1, 5, 11, 5, -7, -20,
		-64, -35, -25, -12, -22, -14, -30, -73,
	};
	
	int ring_attack_potency[6] = { 0, 40, 60, 55, 108, 0, };
	int zone_attack_potency[6] = { 0, -12, -6, 81, 61, 0, };
	
	int ring_pressure_weight[8] = { 0, 15, 28, 42, 51, 65, 4, 0, };
	int zone_pressure_weight[8] = { 0, -5, -2, 1, 4, 5, 6, -19, };
	
	int mg_knight_mobility[9] = { -72, -45, -25, -14, -5, -4, 7, 17, 31, };
	int eg_knight_mobility[9] = { -68, -47, -27, -7, 0, 11, 14, 16, 10, };
	
	int mg_bishop_mobility[14] = { -32, -48, -26, -19, -8, 0, 4, 10, 14, 17, 19, 37, 30, 27, };
	int eg_bishop_mobility[14] = { -52, -64, -40, -19, -7, -4, 7, 11, 14, 15, 17, 9, 11, 7, };
	
	int mg_rook_mobility[15] = { -10, -40, -35, -27, -23, -14, -11, -14, -10, -1, 8, 14, 23, 32, 27, };
	int eg_rook_mobility[15] = { -19, -33, -38, -26, -17, -7, 0, 5, 5, 9, 10, 16, 20, 21, 23, };
	
	int mg_queen_mobility[28] = { 0, 0, -2, -36, -50, -29, -22, -13, -10, -8, -4, -1, 3, 7, 6, 4, 6, 1, 6, 3, 2, 20, 38, 34, 28, 43, 23, 13, };
	int eg_queen_mobility[28] = { 0, 0, 0, -21, -48, -51, -49, -46, -33, -18, -18, -11, -5, -3, 3, 14, 15, 23, 30, 35, 43, 33, 38, 31, 45, 33, 24, 19, };
	
	int mg_king_mobility[9] = { 0, 8, -9, 8, -12, 21, -42, -20, 5, };
	int eg_king_mobility[9] = { 7, 52, 27, 5, 17, -13, 12, 7, -11, };
	
	int mg_isolated_penalty = -13;
	int eg_isolated_penalty = -12;
	
	int mg_doubled_penalty = -3;
	int eg_doubled_penalty = -11;
	
	int mg_backward_penalty = -13;
	int eg_backward_penalty = -13;
	
	int mg_chained_bonus = 10;
	int eg_chained_bonus = 7;
	
	int mg_passed_bonus[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		47, 49, 35, 50, 28, 30, -23, -12,
		37, 25, 24, 19, 20, 20, -10, -14,
		31, 16, 15, 15, 3, 21, -8, 2,
		4, 7, -14, -6, -16, 3, 10, 11,
		3, -3, -24, -13, -14, 13, 5, 35,
		-1, -2, -12, -1, -3, 16, 21, 13,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	int eg_passed_bonus[64] = {
		0, 0, 0, 0, 0, 0, 0, 0,
		103, 96, 98, 80, 82, 81, 104, 111,
		115, 113, 83, 54, 63, 70, 86, 103,
		76, 72, 53, 40, 42, 49, 67, 71,
		45, 43, 32, 23, 25, 25, 43, 41,
		15, 22, 18, 9, 7, 7, 27, 12,
		9, 21, 13, -6, -1, 3, 10, 11,
		0, 0, 0, 0, 0, 0, 0, 0,
	};
	
	int mg_double_bishop = 18;
	int eg_double_bishop = 63;

	int tempo_bonus = 0;

	int taper_start = 6377;
	int taper_end = 321;

	void evaluate_pawn(Board &board, unsigned square, Color friendly);

	void evaluate_kings();

	void note_king_attacks(Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_mobility(Board &board, Piece_type type, uint64_t attacks, Color friendly);

	void evaluate_piece(Board &board, Piece p, unsigned square);

	int evaluate(Board &board);
};
